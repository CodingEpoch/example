import {
  init_useControlled,
  useControlled
} from "./chunk-5HKXDC6Y.js";
import {
  init_isMuiElement,
  isMuiElement
} from "./chunk-UDEREPLU.js";
import {
  createChainedFunction,
  debounce,
  init_createChainedFunction,
  init_debounce,
  init_ownerDocument,
  init_ownerWindow,
  ownerDocument,
  ownerWindow
} from "./chunk-SM3CELUC.js";
import {
  init_requirePropFactory,
  requirePropFactory
} from "./chunk-K53LC6J6.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-EW5S5EY2.js";
import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-BIW63QGX.js";
import {
  init_useIsFocusVisible,
  useIsFocusVisible
} from "./chunk-SHNSTXFN.js";
import {
  init_useEventCallback,
  useEventCallback
} from "./chunk-C3J6IHOV.js";
import {
  init_setRef,
  init_useForkRef,
  setRef,
  useForkRef
} from "./chunk-I4AUBGLO.js";
import {
  deprecatedPropType,
  init_deprecatedPropType
} from "./chunk-EU4TR4YR.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-QTW5MCRA.js";
import {
  _objectWithoutProperties,
  alpha,
  chainPropTypes,
  clsx_m_default,
  init_clsx_m,
  init_colorManipulator,
  init_esm,
  init_objectWithoutProperties,
  init_withStyles,
  withStyles_default
} from "./chunk-R75MZ3JU.js";
import {
  _extends,
  init_extends
} from "./chunk-DQPHAHAW.js";
import {
  require_prop_types
} from "./chunk-QHXF6CUT.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/utils/unsupportedProp.js
function unsupportedProp(props, propName, componentName, location, propFullName) {
  if (false) {
    return null;
  }
  var propFullNameSafe = propFullName || propName;
  if (typeof props[propName] !== "undefined") {
    return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
  }
  return null;
}
var init_unsupportedProp = __esm({
  "node_modules/@material-ui/core/esm/utils/unsupportedProp.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/unstable_useId.js
function useId(idOverride) {
  var _React$useState = React.useState(idOverride), defaultId = _React$useState[0], setDefaultId = _React$useState[1];
  var id = idOverride || defaultId;
  React.useEffect(function() {
    if (defaultId == null) {
      setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
    }
  }, [defaultId]);
  return id;
}
var React;
var init_unstable_useId = __esm({
  "node_modules/@material-ui/core/esm/utils/unstable_useId.js"() {
    React = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/utils/index.js
var utils_exports = {};
__export(utils_exports, {
  capitalize: () => capitalize,
  createChainedFunction: () => createChainedFunction,
  createSvgIcon: () => createSvgIcon,
  debounce: () => debounce,
  deprecatedPropType: () => deprecatedPropType,
  isMuiElement: () => isMuiElement,
  ownerDocument: () => ownerDocument,
  ownerWindow: () => ownerWindow,
  requirePropFactory: () => requirePropFactory,
  setRef: () => setRef,
  unstable_useId: () => useId,
  unsupportedProp: () => unsupportedProp,
  useControlled: () => useControlled,
  useEventCallback: () => useEventCallback,
  useForkRef: () => useForkRef,
  useIsFocusVisible: () => useIsFocusVisible
});
var init_utils = __esm({
  "node_modules/@material-ui/core/esm/utils/index.js"() {
    init_capitalize();
    init_createChainedFunction();
    init_createSvgIcon();
    init_debounce();
    init_deprecatedPropType();
    init_isMuiElement();
    init_ownerDocument();
    init_ownerWindow();
    init_requirePropFactory();
    init_setRef();
    init_unsupportedProp();
    init_useControlled();
    init_useEventCallback();
    init_useForkRef();
    init_unstable_useId();
    init_useIsFocusVisible();
  }
});

// node_modules/@material-ui/core/esm/IconButton/IconButton.js
var React2, import_prop_types, styles, IconButton, IconButton_default;
var init_IconButton = __esm({
  "node_modules/@material-ui/core/esm/IconButton/IconButton.js"() {
    init_extends();
    init_objectWithoutProperties();
    React2 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_withStyles();
    init_colorManipulator();
    init_ButtonBase();
    init_capitalize();
    styles = function styles2(theme) {
      return {
        root: {
          textAlign: "center",
          flex: "0 0 auto",
          fontSize: theme.typography.pxToRem(24),
          padding: 12,
          borderRadius: "50%",
          overflow: "visible",
          color: theme.palette.action.active,
          transition: theme.transitions.create("background-color", {
            duration: theme.transitions.duration.shortest
          }),
          "&:hover": {
            backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          "&$disabled": {
            backgroundColor: "transparent",
            color: theme.palette.action.disabled
          }
        },
        edgeStart: {
          marginLeft: -12,
          "$sizeSmall&": {
            marginLeft: -3
          }
        },
        edgeEnd: {
          marginRight: -12,
          "$sizeSmall&": {
            marginRight: -3
          }
        },
        colorInherit: {
          color: "inherit"
        },
        colorPrimary: {
          color: theme.palette.primary.main,
          "&:hover": {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        colorSecondary: {
          color: theme.palette.secondary.main,
          "&:hover": {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        disabled: {},
        sizeSmall: {
          padding: 3,
          fontSize: theme.typography.pxToRem(18)
        },
        label: {
          width: "100%",
          display: "flex",
          alignItems: "inherit",
          justifyContent: "inherit"
        }
      };
    };
    IconButton = React2.forwardRef(function IconButton2(props, ref) {
      var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
      return React2.createElement(ButtonBase_default, _extends({
        className: clsx_m_default(classes.root, className, color !== "default" && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
          "start": classes.edgeStart,
          "end": classes.edgeEnd
        }[edge]),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        ref
      }, other), React2.createElement("span", {
        className: classes.label
      }, children));
    });
    true ? IconButton.propTypes = {
      children: chainPropTypes(import_prop_types.default.node, function(props) {
        var found = React2.Children.toArray(props.children).some(function(child) {
          return React2.isValidElement(child) && child.props.onClick;
        });
        if (found) {
          return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
        }
        return null;
      }),
      classes: import_prop_types.default.object.isRequired,
      className: import_prop_types.default.string,
      color: import_prop_types.default.oneOf(["default", "inherit", "primary", "secondary"]),
      disabled: import_prop_types.default.bool,
      disableFocusRipple: import_prop_types.default.bool,
      disableRipple: import_prop_types.default.bool,
      edge: import_prop_types.default.oneOf(["start", "end", false]),
      size: import_prop_types.default.oneOf(["small", "medium"])
    } : void 0;
    IconButton_default = withStyles_default(styles, {
      name: "MuiIconButton"
    })(IconButton);
  }
});

// node_modules/@material-ui/core/esm/IconButton/index.js
var IconButton_exports = {};
__export(IconButton_exports, {
  default: () => IconButton_default
});
var init_IconButton2 = __esm({
  "node_modules/@material-ui/core/esm/IconButton/index.js"() {
    init_IconButton();
  }
});

export {
  unsupportedProp,
  init_unsupportedProp,
  useId,
  init_unstable_useId,
  utils_exports,
  init_utils,
  IconButton_default,
  IconButton_exports,
  init_IconButton2 as init_IconButton
};
//# sourceMappingURL=chunk-7CEZYRIB.js.map
