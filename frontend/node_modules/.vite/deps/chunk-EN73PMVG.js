import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-JBGCG5LI.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-2BGRADR5.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-FWBHA4J6.js";
import {
  _objectWithoutProperties,
  alpha,
  chainPropTypes,
  init_colorManipulator,
  init_esm,
  init_objectWithoutProperties
} from "./chunk-AW56PTTK.js";
import {
  _extends,
  init_extends
} from "./chunk-DQPHAHAW.js";
import {
  require_prop_types
} from "./chunk-QHXF6CUT.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-RA6GVHQM.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/IconButton/IconButton.js
var React, import_prop_types, styles, IconButton, IconButton_default;
var init_IconButton = __esm({
  "node_modules/@material-ui/core/esm/IconButton/IconButton.js"() {
    init_extends();
    init_objectWithoutProperties();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_withStyles();
    init_colorManipulator();
    init_ButtonBase();
    init_capitalize();
    styles = function styles2(theme) {
      return {
        root: {
          textAlign: "center",
          flex: "0 0 auto",
          fontSize: theme.typography.pxToRem(24),
          padding: 12,
          borderRadius: "50%",
          overflow: "visible",
          color: theme.palette.action.active,
          transition: theme.transitions.create("background-color", {
            duration: theme.transitions.duration.shortest
          }),
          "&:hover": {
            backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          "&$disabled": {
            backgroundColor: "transparent",
            color: theme.palette.action.disabled
          }
        },
        edgeStart: {
          marginLeft: -12,
          "$sizeSmall&": {
            marginLeft: -3
          }
        },
        edgeEnd: {
          marginRight: -12,
          "$sizeSmall&": {
            marginRight: -3
          }
        },
        colorInherit: {
          color: "inherit"
        },
        colorPrimary: {
          color: theme.palette.primary.main,
          "&:hover": {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        colorSecondary: {
          color: theme.palette.secondary.main,
          "&:hover": {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        },
        disabled: {},
        sizeSmall: {
          padding: 3,
          fontSize: theme.typography.pxToRem(18)
        },
        label: {
          width: "100%",
          display: "flex",
          alignItems: "inherit",
          justifyContent: "inherit"
        }
      };
    };
    IconButton = React.forwardRef(function IconButton2(props, ref) {
      var _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);
      return React.createElement(ButtonBase_default, _extends({
        className: clsx_m_default(classes.root, className, color !== "default" && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
          "start": classes.edgeStart,
          "end": classes.edgeEnd
        }[edge]),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        ref
      }, other), React.createElement("span", {
        className: classes.label
      }, children));
    });
    true ? IconButton.propTypes = {
      children: chainPropTypes(import_prop_types.default.node, function(props) {
        var found = React.Children.toArray(props.children).some(function(child) {
          return React.isValidElement(child) && child.props.onClick;
        });
        if (found) {
          return new Error(["Material-UI: You are providing an onClick event listener to a child of a button element.", "Firefox will never trigger the event.", "You should move the onClick listener to the parent button element.", "https://github.com/mui-org/material-ui/issues/13957"].join("\n"));
        }
        return null;
      }),
      classes: import_prop_types.default.object.isRequired,
      className: import_prop_types.default.string,
      color: import_prop_types.default.oneOf(["default", "inherit", "primary", "secondary"]),
      disabled: import_prop_types.default.bool,
      disableFocusRipple: import_prop_types.default.bool,
      disableRipple: import_prop_types.default.bool,
      edge: import_prop_types.default.oneOf(["start", "end", false]),
      size: import_prop_types.default.oneOf(["small", "medium"])
    } : void 0;
    IconButton_default = withStyles_default(styles, {
      name: "MuiIconButton"
    })(IconButton);
  }
});

// node_modules/@material-ui/core/esm/IconButton/index.js
var IconButton_exports = {};
__export(IconButton_exports, {
  default: () => IconButton_default
});
var init_IconButton2 = __esm({
  "node_modules/@material-ui/core/esm/IconButton/index.js"() {
    init_IconButton();
  }
});

export {
  IconButton_default,
  IconButton_exports,
  init_IconButton2 as init_IconButton
};
//# sourceMappingURL=chunk-EN73PMVG.js.map
