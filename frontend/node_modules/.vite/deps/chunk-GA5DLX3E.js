import {
  Typography_default
} from "./chunk-VCVNPUDK.js";
import {
  init_useIsFocusVisible,
  useIsFocusVisible
} from "./chunk-SHNSTXFN.js";
import {
  init_useForkRef,
  useForkRef
} from "./chunk-I4AUBGLO.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-QTW5MCRA.js";
import {
  _objectWithoutProperties,
  clsx_m_default,
  elementTypeAcceptingRef_default,
  init_clsx_m,
  init_esm,
  init_objectWithoutProperties,
  init_withStyles,
  withStyles_default
} from "./chunk-R75MZ3JU.js";
import {
  _extends,
  init_extends
} from "./chunk-DQPHAHAW.js";
import {
  require_prop_types
} from "./chunk-QHXF6CUT.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/Link/Link.js
init_extends();
init_objectWithoutProperties();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_capitalize();
init_withStyles();
init_esm();
init_useIsFocusVisible();
init_useForkRef();
var styles = {
  root: {},
  underlineNone: {
    textDecoration: "none"
  },
  underlineHover: {
    textDecoration: "none",
    "&:hover": {
      textDecoration: "underline"
    }
  },
  underlineAlways: {
    textDecoration: "underline"
  },
  button: {
    position: "relative",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: 0,
    padding: 0,
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    "-moz-appearance": "none",
    "-webkit-appearance": "none",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    },
    "&$focusVisible": {
      outline: "auto"
    }
  },
  focusVisible: {}
};
var Link = React.forwardRef(function Link2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "primary" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "a" : _props$component, onBlur = props.onBlur, onFocus = props.onFocus, TypographyClasses = props.TypographyClasses, _props$underline = props.underline, underline = _props$underline === void 0 ? "hover" : _props$underline, _props$variant = props.variant, variant = _props$variant === void 0 ? "inherit" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);
  var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
  var _React$useState = React.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
  var handlerRef = useForkRef(ref, focusVisibleRef);
  var handleBlur = function handleBlur2(event) {
    if (focusVisible) {
      onBlurVisible();
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  var handleFocus = function handleFocus2(event) {
    if (isFocusVisible(event)) {
      setFocusVisible(true);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  return React.createElement(Typography_default, _extends({
    className: clsx_m_default(classes.root, classes["underline".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === "button" && classes.button),
    classes: TypographyClasses,
    color,
    component,
    onBlur: handleBlur,
    onFocus: handleFocus,
    ref: handlerRef,
    variant
  }, other));
});
true ? Link.propTypes = {
  children: import_prop_types.default.node.isRequired,
  classes: import_prop_types.default.object.isRequired,
  className: import_prop_types.default.string,
  color: import_prop_types.default.oneOf(["initial", "inherit", "primary", "secondary", "textPrimary", "textSecondary", "error"]),
  component: elementTypeAcceptingRef_default,
  onBlur: import_prop_types.default.func,
  onFocus: import_prop_types.default.func,
  TypographyClasses: import_prop_types.default.object,
  underline: import_prop_types.default.oneOf(["none", "hover", "always"]),
  variant: import_prop_types.default.string
} : void 0;
var Link_default = withStyles_default(styles, {
  name: "MuiLink"
})(Link);

export {
  Link_default
};
//# sourceMappingURL=chunk-GA5DLX3E.js.map
