import {
  Slide_default,
  init_Slide
} from "./chunk-CCCS45ZC.js";
import {
  Backdrop_default
} from "./chunk-UHI5MHG5.js";
import {
  Modal_default
} from "./chunk-KD3LVOQU.js";
import {
  init_useTheme,
  useTheme
} from "./chunk-VTOVX6K3.js";
import {
  Paper_default
} from "./chunk-DKXSJD6W.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-D747WDW4.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-QRE3AVBU.js";
import {
  _objectWithoutProperties,
  duration,
  init_objectWithoutProperties,
  init_transitions
} from "./chunk-X3FFGSA7.js";
import {
  _extends,
  init_extends
} from "./chunk-DQPHAHAW.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-RA6GVHQM.js";
import {
  require_prop_types
} from "./chunk-QHXF6CUT.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/Drawer/Drawer.js
init_extends();
init_objectWithoutProperties();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_Slide();
init_capitalize();
init_transitions();
init_useTheme();
var styles = function styles2(theme) {
  return {
    root: {},
    docked: {
      flex: "0 0 auto"
    },
    paper: {
      overflowY: "auto",
      display: "flex",
      flexDirection: "column",
      height: "100%",
      flex: "1 0 auto",
      zIndex: theme.zIndex.drawer,
      WebkitOverflowScrolling: "touch",
      position: "fixed",
      top: 0,
      outline: 0
    },
    paperAnchorLeft: {
      left: 0,
      right: "auto"
    },
    paperAnchorRight: {
      left: "auto",
      right: 0
    },
    paperAnchorTop: {
      top: 0,
      left: 0,
      bottom: "auto",
      right: 0,
      height: "auto",
      maxHeight: "100%"
    },
    paperAnchorBottom: {
      top: "auto",
      left: 0,
      bottom: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    },
    paperAnchorDockedLeft: {
      borderRight: "1px solid ".concat(theme.palette.divider)
    },
    paperAnchorDockedTop: {
      borderBottom: "1px solid ".concat(theme.palette.divider)
    },
    paperAnchorDockedRight: {
      borderLeft: "1px solid ".concat(theme.palette.divider)
    },
    paperAnchorDockedBottom: {
      borderTop: "1px solid ".concat(theme.palette.divider)
    },
    modal: {}
  };
};
var oppositeDirection = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function isHorizontal(anchor) {
  return ["left", "right"].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
  return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
var defaultTransitionDuration = {
  enter: duration.enteringScreen,
  exit: duration.leavingScreen
};
var Drawer = React.forwardRef(function Drawer2(props, ref) {
  var _props$anchor = props.anchor, anchorProp = _props$anchor === void 0 ? "left" : _props$anchor, BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 16 : _props$elevation, _props$ModalProps = props.ModalProps;
  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  var BackdropPropsProp = _props$ModalProps.BackdropProps, ModalProps = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, _props$open = props.open, open = _props$open === void 0 ? false : _props$open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SlideProps = props.SlideProps, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Slide_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "temporary" : _props$variant, other = _objectWithoutProperties(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"]);
  var theme = useTheme();
  var mounted = React.useRef(false);
  React.useEffect(function() {
    mounted.current = true;
  }, []);
  var anchor = getAnchor(theme, anchorProp);
  var drawer = React.createElement(Paper_default, _extends({
    elevation: variant === "temporary" ? elevation : 0,
    square: true
  }, PaperProps, {
    className: clsx_m_default(classes.paper, classes["paperAnchor".concat(capitalize(anchor))], PaperProps.className, variant !== "temporary" && classes["paperAnchorDocked".concat(capitalize(anchor))])
  }), children);
  if (variant === "permanent") {
    return React.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.docked, className),
      ref
    }, other), drawer);
  }
  var slidingDrawer = React.createElement(TransitionComponent, _extends({
    in: open,
    direction: oppositeDirection[anchor],
    timeout: transitionDuration,
    appear: mounted.current
  }, SlideProps), drawer);
  if (variant === "persistent") {
    return React.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.docked, className),
      ref
    }, other), slidingDrawer);
  }
  return React.createElement(Modal_default, _extends({
    BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
      transitionDuration
    }),
    BackdropComponent: Backdrop_default,
    className: clsx_m_default(classes.root, classes.modal, className),
    open,
    onClose,
    ref
  }, other, ModalProps), slidingDrawer);
});
true ? Drawer.propTypes = {
  anchor: import_prop_types.default.oneOf(["bottom", "left", "right", "top"]),
  BackdropProps: import_prop_types.default.object,
  children: import_prop_types.default.node,
  classes: import_prop_types.default.object,
  className: import_prop_types.default.string,
  elevation: import_prop_types.default.number,
  ModalProps: import_prop_types.default.object,
  onClose: import_prop_types.default.func,
  open: import_prop_types.default.bool,
  PaperProps: import_prop_types.default.object,
  SlideProps: import_prop_types.default.object,
  transitionDuration: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    appear: import_prop_types.default.number,
    enter: import_prop_types.default.number,
    exit: import_prop_types.default.number
  })]),
  variant: import_prop_types.default.oneOf(["permanent", "persistent", "temporary"])
} : void 0;
var Drawer_default = withStyles_default(styles, {
  name: "MuiDrawer",
  flip: false
})(Drawer);

export {
  isHorizontal,
  getAnchor,
  Drawer_default
};
//# sourceMappingURL=chunk-WHEIQV3Q.js.map
