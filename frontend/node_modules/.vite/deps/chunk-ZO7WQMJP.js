import {
  debounce,
  init_debounce
} from "./chunk-26MGAMJX.js";
import {
  getTransitionProps,
  init_utils,
  reflow
} from "./chunk-5FWQOH2F.js";
import {
  init_useTheme,
  useTheme
} from "./chunk-NVGMITRW.js";
import {
  Transition_default,
  init_esm as init_esm2
} from "./chunk-BP2CIXS6.js";
import {
  init_useForkRef,
  useForkRef
} from "./chunk-I4AUBGLO.js";
import {
  require_react_dom
} from "./chunk-3XI55KIC.js";
import {
  _objectWithoutProperties,
  duration,
  elementAcceptingRef_default,
  init_esm,
  init_objectWithoutProperties,
  init_transitions
} from "./chunk-AW56PTTK.js";
import {
  _extends,
  init_extends
} from "./chunk-DQPHAHAW.js";
import {
  require_prop_types
} from "./chunk-QHXF6CUT.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/Slide/Slide.js
function getTranslateValue(direction, node) {
  var rect = node.getBoundingClientRect();
  var transform;
  if (node.fakeTransform) {
    transform = node.fakeTransform;
  } else {
    var computedStyle = window.getComputedStyle(node);
    transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
  }
  var offsetX = 0;
  var offsetY = 0;
  if (transform && transform !== "none" && typeof transform === "string") {
    var transformValues = transform.split("(")[1].split(")")[0].split(",");
    offsetX = parseInt(transformValues[4], 10);
    offsetY = parseInt(transformValues[5], 10);
  }
  if (direction === "left") {
    return "translateX(".concat(window.innerWidth, "px) translateX(").concat(offsetX - rect.left, "px)");
  }
  if (direction === "right") {
    return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
  }
  if (direction === "up") {
    return "translateY(".concat(window.innerHeight, "px) translateY(").concat(offsetY - rect.top, "px)");
  }
  return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
}
function setTranslateValue(direction, node) {
  var transform = getTranslateValue(direction, node);
  if (transform) {
    node.style.webkitTransform = transform;
    node.style.transform = transform;
  }
}
var React, import_prop_types, ReactDOM, defaultTimeout, Slide, Slide_default;
var init_Slide = __esm({
  "node_modules/@material-ui/core/esm/Slide/Slide.js"() {
    init_extends();
    init_objectWithoutProperties();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    ReactDOM = __toESM(require_react_dom());
    init_debounce();
    init_esm2();
    init_esm();
    init_useForkRef();
    init_useTheme();
    init_transitions();
    init_utils();
    defaultTimeout = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    Slide = React.forwardRef(function Slide2(props, ref) {
      var children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "down" : _props$direction, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
      var theme = useTheme();
      var childrenRef = React.useRef(null);
      var handleOwnRef = React.useCallback(function(instance) {
        childrenRef.current = ReactDOM.findDOMNode(instance);
      }, []);
      var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);
      var handleRef = useForkRef(handleRefIntermediary, ref);
      var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
        return function(isAppearing) {
          if (callback) {
            if (isAppearing === void 0) {
              callback(childrenRef.current);
            } else {
              callback(childrenRef.current, isAppearing);
            }
          }
        };
      };
      var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
        setTranslateValue(direction, node);
        reflow(node);
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
        var transitionProps = getTransitionProps({
          timeout,
          style
        }, {
          mode: "enter"
        });
        node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.webkitTransform = "none";
        node.style.transform = "none";
        if (onEntering) {
          onEntering(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function(node) {
        var transitionProps = getTransitionProps({
          timeout,
          style
        }, {
          mode: "exit"
        });
        node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        setTranslateValue(direction, node);
        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(function(node) {
        node.style.webkitTransition = "";
        node.style.transition = "";
        if (onExited) {
          onExited(node);
        }
      });
      var updatePosition = React.useCallback(function() {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current);
        }
      }, [direction]);
      React.useEffect(function() {
        if (inProp || direction === "down" || direction === "right") {
          return void 0;
        }
        var handleResize = debounce(function() {
          if (childrenRef.current) {
            setTranslateValue(direction, childrenRef.current);
          }
        });
        window.addEventListener("resize", handleResize);
        return function() {
          handleResize.clear();
          window.removeEventListener("resize", handleResize);
        };
      }, [direction, inProp]);
      React.useEffect(function() {
        if (!inProp) {
          updatePosition();
        }
      }, [inProp, updatePosition]);
      return React.createElement(TransitionComponent, _extends({
        nodeRef: childrenRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        appear: true,
        in: inProp,
        timeout
      }, other), function(state, childProps) {
        return React.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style, children.props.style)
        }, childProps));
      });
    });
    true ? Slide.propTypes = {
      children: elementAcceptingRef_default,
      direction: import_prop_types.default.oneOf(["down", "left", "right", "up"]),
      in: import_prop_types.default.bool,
      onEnter: import_prop_types.default.func,
      onEntered: import_prop_types.default.func,
      onEntering: import_prop_types.default.func,
      onExit: import_prop_types.default.func,
      onExited: import_prop_types.default.func,
      onExiting: import_prop_types.default.func,
      style: import_prop_types.default.object,
      timeout: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
        appear: import_prop_types.default.number,
        enter: import_prop_types.default.number,
        exit: import_prop_types.default.number
      })])
    } : void 0;
    Slide_default = Slide;
  }
});

// node_modules/@material-ui/core/esm/Slide/index.js
var Slide_exports = {};
__export(Slide_exports, {
  default: () => Slide_default
});
var init_Slide2 = __esm({
  "node_modules/@material-ui/core/esm/Slide/index.js"() {
    init_Slide();
  }
});

export {
  Slide_default,
  Slide_exports,
  init_Slide2 as init_Slide
};
//# sourceMappingURL=chunk-ZO7WQMJP.js.map
